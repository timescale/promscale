name: Daily scheduled extended Go tests

on:
  push:
    branches: [force_test, release-*]
  schedule:
    - cron: "6 0 * * *"

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Use Go module caching
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build extension image
      run: git clone https://github.com/timescale/promscale_extension && cd promscale_extension && make -f DockerMakefile docker-image

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Format
      run: |
        diff -u <(echo -n) <(gofmt -d .)

    - name: Lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.30.0
        /home/runner/go/bin/golangci-lint run --skip-dirs=pkg/promql --skip-dirs=pkg/promb

    - name: Build
      run: go build -v ./...

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Use Go module caching
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Test
      run: go test -v -race ./... -timeout 15m

    - name: Test extended dataset
      run: go test -v -race -timeout=30m ./pkg/tests/end_to_end_tests/ -extended-test

    - name: Generated
      run: |
        go generate ./...
        git diff --exit-code

  test-end-to-end:
    name: Test end-to-end extension combinations
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-setups:
        - {name: "Multinode",               ext: true,  tsdb: true,  tsdb2: true,  multi: true,  pg: 13}
        - {name: "W/O Promscale Extension", ext: false, tsdb: true,  tsdb2: true,  multi: false, pg: 13}
        - {name: "Plain Postgres",          ext: false, tsdb: false, tsdb2: false, multi: false, pg: 13}
        - {name: "Timescaledb 1.x (pg 12)", ext: true,  tsdb: true,  tsdb2: false, multi: false, pg: 12}
        - {name: "Plain Postgres (12)",     ext: false, tsdb: false, tsdb2: false, multi: false, pg: 12}
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Use Go module caching
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Test ${{ matrix.test-setups.name }}
      env:
        EXT: ${{ matrix.test-setups.ext }}
        TSDB: ${{ matrix.test-setups.tsdb }}
        TSDB2: ${{ matrix.test-setups.tsdb2 }}
        MULTI: ${{ matrix.test-setups.multi }}
        PG: ${{ matrix.test-setups.pg }}
      run: go test ./pkg/tests/end_to_end_tests/ -use-extension=$EXT -use-timescaledb=$TSDB -use-timescale2=$TSDB2 -use-multinode=$MULTI -postgres-version-major=$PG
