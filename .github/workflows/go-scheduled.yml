name: Daily scheduled extended Go tests

defaults:
  run:
    shell: bash --noprofile --norc -eo pipefail {0}

on:
  push:
    branches: [force_test, release-*]
  schedule:
    - cron: "6 0 * * *"

env:
  golang-version: 1.17.7

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Set up Go ${{ env.golang-version }}
      uses: actions/setup-go@v3.0.0
      with:
        go-version: ${{ env.golang-version }}
      id: go

    - name: Use Go module caching
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build
      run: make build

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
      with:
        lfs: true

    - name: Checkout LFS objects
      run: git lfs checkout 

    - name: Set up Go ${{ env.golang-version }}
      uses: actions/setup-go@v3.0.0
      with:
        go-version: ${{ env.golang-version }}
      id: go

    - name: Use Go module caching
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Test
      run: make test

    - name: Test extended dataset
      run: go test -v -race -timeout=30m ./pkg/tests/end_to_end_tests/ -extended-test

  test-end-to-end:
    name: Test end-to-end extension combinations
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-setups:
        - {name: "Multinode",                             ext: true,  tsdb: true,  tsdb2: true,  multi: true,  pg: 13, nightly: false}
        - {name: "W/O Promscale Extension",               ext: false, tsdb: true,  tsdb2: true,  multi: false, pg: 13, nightly: false}
        - {name: "Plain Postgres",                        ext: false, tsdb: false, tsdb2: false, multi: false, pg: 13, nightly: false}
        - {name: "Timescaledb 1.x (pg 12)",               ext: true,  tsdb: true,  tsdb2: false, multi: false, pg: 12, nightly: false}
        - {name: "Plain Postgres (12)",                   ext: false, tsdb: false, tsdb2: false, multi: false, pg: 12, nightly: false}
        - {name: "TimescaleDB Nightly (PG-13)",            ext: false, tsdb: true,  tsdb2: true,  multi: false, pg: 13, nightly: true}
        - {name: "TimescaleDB-Multinode Nightly (PG-13)",  ext: false, tsdb: true,  tsdb2: true,  multi: true,  pg: 13, nightly: true}
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
      with:
        lfs: true

    - name: Checkout LFS objects
      run: git lfs checkout

    - name: Set up Go ${{ env.golang-version }}
      uses: actions/setup-go@v3.0.0
      with:
        go-version: ${{ env.golang-version }}
      id: go

    - name: Use Go module caching
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Test ${{ matrix.test-setups.name }}
      env:
        PG: ${{ matrix.test-setups.pg }}
        EXT: ${{ matrix.test-setups.ext }}
        TSDB: ${{ matrix.test-setups.tsdb }}
        TSDB2: ${{ matrix.test-setups.tsdb2 }}
        MULTI: ${{ matrix.test-setups.multi }}
        NIGHTLY: ${{ matrix.test-setups.nightly }}
      run: go test ./pkg/tests/end_to_end_tests/ -use-extension=$EXT -use-timescaledb=$TSDB -use-timescale2=$TSDB2 -use-multinode=$MULTI -use-timescaledb-nightly=$NIGHTLY -postgres-version-major=$PG

  test-helm-chart:
    name: Test helm-chart template generation
    runs-on: ubuntu-latest
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Test helm chart static generation
      run: ./scripts/generate-deploy-script.sh
