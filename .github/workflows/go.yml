name: Go

on:
  push:
    branches: [master, main, force_test, release-*, staging, trying]
  pull_request:
    branches: ['**']

jobs:
  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Import environment variables
      run: cat ".github/env" >> $GITHUB_ENV

    - name: Set up Go ${{ env.golang-version }}
      uses: actions/setup-go@v2.2.0
      with:
        go-version: ${{ env.golang-version }}
      id: go

    - name: Lint
      uses: golangci/golangci-lint-action@v2
      with:
        version: ${{ env.golangci-lint-version }}

    - name: Format
      run: |
        make go-fmt
        git diff --exit-code .

    - name: Build
      run: make build

  test:
    name: unit
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Checkout test data files
      run: wget https://github.com/timescale/promscale-test-data/raw/main/traces-dataset.sz -O pkg/tests/testdata/traces-dataset.sz

    - name: Import environment variables
      run: cat ".github/env" >> $GITHUB_ENV

    - name: Set up Go ${{ env.golang-version }}
      uses: actions/setup-go@v2.2.0
      with:
        go-version: ${{ env.golang-version }}
      id: go

    - name: Use Go module caching
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Test
      run: make test > complete-test-run.log  2>&1

    - name: 'Print failure logs'
      if: ${{ failure() }}
      run: grep "^[- F]" complete-test-run.log

    - name: 'Upload Log Artifact'
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: complete-test-run.log
        path: complete-test-run.log
        retention-days: 5

    - name: Generated
      run: |
        go generate ./...
        git diff --exit-code

  test-end-to-end:
    name: e2e
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-setups:
        - {name: "Timescaledb 1.x (pg 12)",  shortname: "tsdb1x-pg-12", ext: true,  tsdb: true,  tsdb2: false, tsdboss: false, multi: false, pg: 12}
        - {name: "Plain Postgres (12)",      shortname: "plain-pg-12",  ext: false, tsdb: false, tsdb2: false, tsdboss: false, multi: false, pg: 12}
        - {name: "Plain Postgres (13)",      shortname: "plain-pg-13",  ext: false, tsdb: false, tsdb2: false, tsdboss: false, multi: false, pg: 13}
        - {name: "Singlenode",               shortname: "singlenode",   ext: true,  tsdb: true,  tsdb2: true,  tsdboss: false, multi: false, pg: 14}
        - {name: "Multinode",                shortname: "multinode",    ext: true,  tsdb: true,  tsdb2: true,  tsdboss: false, multi: true,  pg: 14}
        - {name: "W/O Promscale Extension",  shortname: "wo-prom-ext",  ext: false, tsdb: true,  tsdb2: true,  tsdboss: false, multi: false, pg: 14}
        - {name: "Plain Postgres",           shortname: "plain-pg",     ext: false, tsdb: false, tsdb2: false, tsdboss: false, multi: false, pg: 14}
        - {name: "TimescaleDB-OSS",          shortname: "tsdb-oss",     ext: false, tsdb: true,  tsdb2: true,  tsdboss: true,  multi: false, pg: 14}

    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Checkout test data files
      run: wget https://github.com/timescale/promscale-test-data/raw/main/traces-dataset.sz -O pkg/tests/testdata/traces-dataset.sz

    - name: Import environment variables
      run: cat ".github/env" >> $GITHUB_ENV

    - name: Set up Go ${{ env.golang-version }}
      uses: actions/setup-go@v2.2.0
      with:
        go-version: ${{ env.golang-version }}
      id: go

    - name: Use Go module caching
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Test ${{ matrix.test-setups.name }}
      env:
        PG: ${{ matrix.test-setups.pg }}
        EXT: ${{ matrix.test-setups.ext }}
        TSDB: ${{ matrix.test-setups.tsdb }}
        TSDB2: ${{ matrix.test-setups.tsdb2 }}
        MULTI: ${{ matrix.test-setups.multi }}
        TSDBOSS: ${{ matrix.test-setups.tsdboss }}
        SHORTNAME: ${{ matrix.test-setups.shortname }}
      run: go test -race ./pkg/tests/end_to_end_tests/ -use-extension=$EXT -use-timescaledb=$TSDB -use-timescale2=$TSDB2 -use-timescaledb-oss=$TSDBOSS -use-multinode=$MULTI -postgres-version-major=$PG | tee $SHORTNAME-test-run.log  2>&1

    - name: 'Upload Log Artifact'
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.test-setups.shortname }}-test-run.log
        path: ${{ matrix.test-setups.shortname }}-test-run.log
        retention-days: 5

  # Added to summarize the matrix (otherwise we would need to list every single
  # job in bors.toml)
  tests-result:
    name: e2e results
    if: always()
    needs:
      - test-end-to-end
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        if: needs.test-end-to-end.result == 'success'
        run: exit 0
      - name: Mark the job as a failure
        if: needs.test-end-to-end.result != 'success'
        run: exit 1
