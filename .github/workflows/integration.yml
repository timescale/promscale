name: Integration

on:
  push:
    branches: [master, main, force_test, release-*, staging, trying]
  pull_request:
    branches: [master, main, force_test, release-*]

jobs:
  run:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-setups:
        - {name: "TimescaleDB 2.x without Promscale extension (pg13)", image: "timescale/timescaledb:latest-pg13"}
        - {name: "TimescaleDB 2.x with Promscale extension (pg13)", image: "timescaledev/promscale-extension:latest-ts2-pg13"}
        - {name: "TimescaleDB 2.x with Promscale extension (pg12)", image: "timescaledev/promscale-extension:latest-ts2-pg12"}
        - {name: "TimescaleDB 1.x with Promscale extension (pg12)", image: "timescaledev/promscale-extension:latest-ts1-pg12"}
        - {name: "Test against first supported", image: "timescale/timescaledb:1.7.4-pg12"}
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Import environment variables
      run: cat ".github/env" >> $GITHUB_ENV

    - name: Set up Go ${{ env.golang-version }}
      uses: actions/setup-go@v2.1.4
      with:
        go-version: ${{ env.golang-version }}
      id: go

    - name: ${{ matrix.test-setups.name }}
      run: ./scripts/end_to_end_tests.sh ${{ matrix.test-setups.image }}
      shell: bash

  # Added to summarize the matrix (otherwise we would need to list every single job in branch protection rules)
  run-result:
    name: integration results
    if: always()
    needs:
      - run
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        if: needs.run.result == 'success'
        run: exit 0
      - name: Mark the job as a failure
        if: needs.run.result != 'success'
        run: exit 1
