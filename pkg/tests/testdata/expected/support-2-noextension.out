\set ON_ERROR_STOP 1
SELECT _prom_catalog.get_or_create_metric_table_name('cpu_usage');
 get_or_create_metric_table_name 
---------------------------------
 (1,cpu_usage,t)
(1 row)

SELECT _prom_catalog.get_or_create_metric_table_name('cpu_total');
 get_or_create_metric_table_name 
---------------------------------
 (2,cpu_total,t)
(1 row)

CALL _prom_catalog.finalize_metric_creation();
CALL
INSERT INTO prom_data.cpu_usage
SELECT timestamptz '2000-01-01 02:03:04'+(interval '1s' * g), 100.1 + g, _prom_catalog.get_or_create_series_id('{"__name__": "cpu_usage", "namespace":"dev", "node": "brain"}')
FROM generate_series(1,10) g;
INSERT 0 10
INSERT INTO prom_data.cpu_usage
SELECT timestamptz '2000-01-01 02:03:04'+(interval '1s' * g), 100.1 + g, _prom_catalog.get_or_create_series_id('{"__name__": "cpu_usage", "namespace":"production", "node": "pinky", "new_tag":"foo"}')
FROM generate_series(1,10) g;
INSERT 0 10
INSERT INTO prom_data.cpu_total
SELECT timestamptz '2000-01-01 02:03:04'+(interval '1s' * g), 100.0, _prom_catalog.get_or_create_series_id('{"__name__": "cpu_total", "namespace":"dev", "node": "brain"}')
FROM generate_series(1,10) g;
INSERT 0 10
INSERT INTO prom_data.cpu_total
SELECT timestamptz '2000-01-01 02:03:04'+(interval '1s' * g), 100.0, _prom_catalog.get_or_create_series_id('{"__name__": "cpu_total", "namespace":"production", "node": "pinky", "new_tag_2":"bar"}')
FROM generate_series(1,10) g;
INSERT 0 10
--this should use a subquery with the Promscale extension but not without
--this is thanks to the support function make_call_subquery_support
ANALYZE;
ANALYZE
EXPLAIN (costs off) SELECT time, value, jsonb(labels), val(namespace_id) FROM cpu_usage WHERE labels ? ('namespace' !== 'dev' ) ORDER BY time, series_id LIMIT 5;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Result
         ->  Sort
               Sort Key: data."time", data.series_id
               ->  Nested Loop
                     ->  Seq Scan on cpu_usage series
                           Filter: (NOT ((labels)::integer[] && ((('namespace'::text)::label_key !== ('dev'::text)::pattern))::integer[]))
                     ->  Seq Scan on _hyper_1_1_chunk data
                           Filter: (series.id = series_id)
(9 rows)

